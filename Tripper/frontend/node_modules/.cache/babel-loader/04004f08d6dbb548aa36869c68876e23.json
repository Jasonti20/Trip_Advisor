{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport { computed } from 'vue';\nimport { fillLegacyProps } from '../utils/legacyUtil';\nexport default (function (treeData, searchValue, _ref) {\n  var treeNodeFilterProp = _ref.treeNodeFilterProp,\n      filterTreeNode = _ref.filterTreeNode,\n      fieldNames = _ref.fieldNames;\n  return computed(function () {\n    var fieldChildren = fieldNames.value.children;\n    var searchValueVal = searchValue.value;\n    var treeNodeFilterPropValue = treeNodeFilterProp === null || treeNodeFilterProp === void 0 ? void 0 : treeNodeFilterProp.value;\n\n    if (!searchValueVal || filterTreeNode.value === false) {\n      return treeData.value;\n    }\n\n    var filterOptionFunc;\n\n    if (typeof filterTreeNode.value === 'function') {\n      filterOptionFunc = filterTreeNode.value;\n    } else {\n      var upperStr = searchValueVal.toUpperCase();\n\n      filterOptionFunc = function filterOptionFunc(_, dataNode) {\n        var value = dataNode[treeNodeFilterPropValue];\n        return String(value).toUpperCase().includes(upperStr);\n      };\n    }\n\n    function dig(list) {\n      var keepAll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var res = [];\n\n      for (var index = 0, len = list.length; index < len; index++) {\n        var dataNode = list[index];\n        var children = dataNode[fieldChildren];\n        var match = keepAll || filterOptionFunc(searchValueVal, fillLegacyProps(dataNode));\n        var childList = dig(children || [], match);\n\n        if (match || childList.length) {\n          res.push(_objectSpread(_objectSpread({}, dataNode), {}, _defineProperty({}, fieldChildren, childList)));\n        }\n      }\n\n      return res;\n    }\n\n    return dig(treeData.value);\n  });\n});","map":{"version":3,"names":["_defineProperty","_objectSpread","computed","fillLegacyProps","treeData","searchValue","_ref","treeNodeFilterProp","filterTreeNode","fieldNames","fieldChildren","value","children","searchValueVal","treeNodeFilterPropValue","filterOptionFunc","upperStr","toUpperCase","_","dataNode","String","includes","dig","list","keepAll","arguments","length","undefined","res","index","len","match","childList","push"],"sources":["/Users/jasonti/Desktop/Tripper/vue/node_modules/ant-design-vue/es/vc-tree-select/hooks/useFilterTreeData.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport { computed } from 'vue';\nimport { fillLegacyProps } from '../utils/legacyUtil';\nexport default (function (treeData, searchValue, _ref) {\n  var treeNodeFilterProp = _ref.treeNodeFilterProp,\n    filterTreeNode = _ref.filterTreeNode,\n    fieldNames = _ref.fieldNames;\n  return computed(function () {\n    var fieldChildren = fieldNames.value.children;\n    var searchValueVal = searchValue.value;\n    var treeNodeFilterPropValue = treeNodeFilterProp === null || treeNodeFilterProp === void 0 ? void 0 : treeNodeFilterProp.value;\n    if (!searchValueVal || filterTreeNode.value === false) {\n      return treeData.value;\n    }\n    var filterOptionFunc;\n    if (typeof filterTreeNode.value === 'function') {\n      filterOptionFunc = filterTreeNode.value;\n    } else {\n      var upperStr = searchValueVal.toUpperCase();\n      filterOptionFunc = function filterOptionFunc(_, dataNode) {\n        var value = dataNode[treeNodeFilterPropValue];\n        return String(value).toUpperCase().includes(upperStr);\n      };\n    }\n    function dig(list) {\n      var keepAll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var res = [];\n      for (var index = 0, len = list.length; index < len; index++) {\n        var dataNode = list[index];\n        var children = dataNode[fieldChildren];\n        var match = keepAll || filterOptionFunc(searchValueVal, fillLegacyProps(dataNode));\n        var childList = dig(children || [], match);\n        if (match || childList.length) {\n          res.push(_objectSpread(_objectSpread({}, dataNode), {}, _defineProperty({}, fieldChildren, childList)));\n        }\n      }\n      return res;\n    }\n    return dig(treeData.value);\n  });\n});"],"mappings":";AAAA,OAAOA,eAAP,MAA4B,2CAA5B;AACA,OAAOC,aAAP,MAA0B,0CAA1B;AACA,SAASC,QAAT,QAAyB,KAAzB;AACA,SAASC,eAAT,QAAgC,qBAAhC;AACA,gBAAgB,UAAUC,QAAV,EAAoBC,WAApB,EAAiCC,IAAjC,EAAuC;EACrD,IAAIC,kBAAkB,GAAGD,IAAI,CAACC,kBAA9B;EAAA,IACEC,cAAc,GAAGF,IAAI,CAACE,cADxB;EAAA,IAEEC,UAAU,GAAGH,IAAI,CAACG,UAFpB;EAGA,OAAOP,QAAQ,CAAC,YAAY;IAC1B,IAAIQ,aAAa,GAAGD,UAAU,CAACE,KAAX,CAAiBC,QAArC;IACA,IAAIC,cAAc,GAAGR,WAAW,CAACM,KAAjC;IACA,IAAIG,uBAAuB,GAAGP,kBAAkB,KAAK,IAAvB,IAA+BA,kBAAkB,KAAK,KAAK,CAA3D,GAA+D,KAAK,CAApE,GAAwEA,kBAAkB,CAACI,KAAzH;;IACA,IAAI,CAACE,cAAD,IAAmBL,cAAc,CAACG,KAAf,KAAyB,KAAhD,EAAuD;MACrD,OAAOP,QAAQ,CAACO,KAAhB;IACD;;IACD,IAAII,gBAAJ;;IACA,IAAI,OAAOP,cAAc,CAACG,KAAtB,KAAgC,UAApC,EAAgD;MAC9CI,gBAAgB,GAAGP,cAAc,CAACG,KAAlC;IACD,CAFD,MAEO;MACL,IAAIK,QAAQ,GAAGH,cAAc,CAACI,WAAf,EAAf;;MACAF,gBAAgB,GAAG,SAASA,gBAAT,CAA0BG,CAA1B,EAA6BC,QAA7B,EAAuC;QACxD,IAAIR,KAAK,GAAGQ,QAAQ,CAACL,uBAAD,CAApB;QACA,OAAOM,MAAM,CAACT,KAAD,CAAN,CAAcM,WAAd,GAA4BI,QAA5B,CAAqCL,QAArC,CAAP;MACD,CAHD;IAID;;IACD,SAASM,GAAT,CAAaC,IAAb,EAAmB;MACjB,IAAIC,OAAO,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,KAAlF;MACA,IAAIG,GAAG,GAAG,EAAV;;MACA,KAAK,IAAIC,KAAK,GAAG,CAAZ,EAAeC,GAAG,GAAGP,IAAI,CAACG,MAA/B,EAAuCG,KAAK,GAAGC,GAA/C,EAAoDD,KAAK,EAAzD,EAA6D;QAC3D,IAAIV,QAAQ,GAAGI,IAAI,CAACM,KAAD,CAAnB;QACA,IAAIjB,QAAQ,GAAGO,QAAQ,CAACT,aAAD,CAAvB;QACA,IAAIqB,KAAK,GAAGP,OAAO,IAAIT,gBAAgB,CAACF,cAAD,EAAiBV,eAAe,CAACgB,QAAD,CAAhC,CAAvC;QACA,IAAIa,SAAS,GAAGV,GAAG,CAACV,QAAQ,IAAI,EAAb,EAAiBmB,KAAjB,CAAnB;;QACA,IAAIA,KAAK,IAAIC,SAAS,CAACN,MAAvB,EAA+B;UAC7BE,GAAG,CAACK,IAAJ,CAAShC,aAAa,CAACA,aAAa,CAAC,EAAD,EAAKkB,QAAL,CAAd,EAA8B,EAA9B,EAAkCnB,eAAe,CAAC,EAAD,EAAKU,aAAL,EAAoBsB,SAApB,CAAjD,CAAtB;QACD;MACF;;MACD,OAAOJ,GAAP;IACD;;IACD,OAAON,GAAG,CAAClB,QAAQ,CAACO,KAAV,CAAV;EACD,CAhCc,CAAf;AAiCD,CArCD"},"metadata":{},"sourceType":"module"}