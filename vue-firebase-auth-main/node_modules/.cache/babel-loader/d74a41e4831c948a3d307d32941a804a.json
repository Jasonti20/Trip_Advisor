{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"children\"];\nimport { createVNode as _createVNode } from \"vue\";\n/* eslint-disable no-lonely-if */\n\n/**\n * Legacy code. Should avoid to use if you are new to import these code.\n */\n\nimport TreeNode from './TreeNode';\nimport { warning } from '../vc-util/warning';\nexport function arrDel(list, value) {\n  if (!list) return [];\n  var clone = list.slice();\n  var index = clone.indexOf(value);\n\n  if (index >= 0) {\n    clone.splice(index, 1);\n  }\n\n  return clone;\n}\nexport function arrAdd(list, value) {\n  var clone = (list || []).slice();\n\n  if (clone.indexOf(value) === -1) {\n    clone.push(value);\n  }\n\n  return clone;\n}\nexport function posToArr(pos) {\n  return pos.split('-');\n}\nexport function getPosition(level, index) {\n  return \"\".concat(level, \"-\").concat(index);\n}\nexport function isTreeNode(node) {\n  return node && node.type && node.type.isTreeNode;\n}\nexport function getDragChildrenKeys(dragNodeKey, keyEntities) {\n  // not contains self\n  // self for left or right drag\n  var dragChildrenKeys = [];\n  var entity = keyEntities[dragNodeKey];\n\n  function dig() {\n    var list = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    list.forEach(function (_ref) {\n      var key = _ref.key,\n          children = _ref.children;\n      dragChildrenKeys.push(key);\n      dig(children);\n    });\n  }\n\n  dig(entity.children);\n  return dragChildrenKeys;\n}\nexport function isLastChild(treeNodeEntity) {\n  if (treeNodeEntity.parent) {\n    var posArr = posToArr(treeNodeEntity.pos);\n    return Number(posArr[posArr.length - 1]) === treeNodeEntity.parent.children.length - 1;\n  }\n\n  return false;\n}\nexport function isFirstChild(treeNodeEntity) {\n  var posArr = posToArr(treeNodeEntity.pos);\n  return Number(posArr[posArr.length - 1]) === 0;\n} // Only used when drag, not affect SSR.\n\nexport function calcDropPosition(event, dragNode, targetNode, indent, startMousePosition, allowDrop, flattenedNodes, keyEntities, expandKeysSet, direction) {\n  var _abstractDropNodeEnti;\n\n  var clientX = event.clientX,\n      clientY = event.clientY;\n\n  var _event$target$getBoun = event.target.getBoundingClientRect(),\n      top = _event$target$getBoun.top,\n      height = _event$target$getBoun.height; // optional chain for testing\n\n\n  var horizontalMouseOffset = (direction === 'rtl' ? -1 : 1) * (((startMousePosition === null || startMousePosition === void 0 ? void 0 : startMousePosition.x) || 0) - clientX);\n  var rawDropLevelOffset = (horizontalMouseOffset - 12) / indent; // find abstract drop node by horizontal offset\n\n  var abstractDropNodeEntity = keyEntities[targetNode.eventKey];\n\n  if (clientY < top + height / 2) {\n    // first half, set abstract drop node to previous node\n    var nodeIndex = flattenedNodes.findIndex(function (flattenedNode) {\n      return flattenedNode.key === abstractDropNodeEntity.key;\n    });\n    var prevNodeIndex = nodeIndex <= 0 ? 0 : nodeIndex - 1;\n    var prevNodeKey = flattenedNodes[prevNodeIndex].key;\n    abstractDropNodeEntity = keyEntities[prevNodeKey];\n  }\n\n  var initialAbstractDropNodeKey = abstractDropNodeEntity.key;\n  var abstractDragOverEntity = abstractDropNodeEntity;\n  var dragOverNodeKey = abstractDropNodeEntity.key;\n  var dropPosition = 0;\n  var dropLevelOffset = 0; // Only allow cross level drop when dragging on a non-expanded node\n\n  if (!expandKeysSet.has(initialAbstractDropNodeKey)) {\n    for (var i = 0; i < rawDropLevelOffset; i += 1) {\n      if (isLastChild(abstractDropNodeEntity)) {\n        abstractDropNodeEntity = abstractDropNodeEntity.parent;\n        dropLevelOffset += 1;\n      } else {\n        break;\n      }\n    }\n  }\n\n  var abstractDragDataNode = dragNode.eventData;\n  var abstractDropDataNode = abstractDropNodeEntity.node;\n  var dropAllowed = true;\n\n  if (isFirstChild(abstractDropNodeEntity) && abstractDropNodeEntity.level === 0 && clientY < top + height / 2 && allowDrop({\n    dragNode: abstractDragDataNode,\n    dropNode: abstractDropDataNode,\n    dropPosition: -1\n  }) && abstractDropNodeEntity.key === targetNode.eventKey) {\n    // first half of first node in first level\n    dropPosition = -1;\n  } else if ((abstractDragOverEntity.children || []).length && expandKeysSet.has(dragOverNodeKey)) {\n    // drop on expanded node\n    // only allow drop inside\n    if (allowDrop({\n      dragNode: abstractDragDataNode,\n      dropNode: abstractDropDataNode,\n      dropPosition: 0\n    })) {\n      dropPosition = 0;\n    } else {\n      dropAllowed = false;\n    }\n  } else if (dropLevelOffset === 0) {\n    if (rawDropLevelOffset > -1.5) {\n      // | Node     | <- abstractDropNode\n      // | -^-===== | <- mousePosition\n      // 1. try drop after\n      // 2. do not allow drop\n      if (allowDrop({\n        dragNode: abstractDragDataNode,\n        dropNode: abstractDropDataNode,\n        dropPosition: 1\n      })) {\n        dropPosition = 1;\n      } else {\n        dropAllowed = false;\n      }\n    } else {\n      // | Node     | <- abstractDropNode\n      // | ---==^== | <- mousePosition\n      // whether it has children or doesn't has children\n      // always\n      // 1. try drop inside\n      // 2. try drop after\n      // 3. do not allow drop\n      if (allowDrop({\n        dragNode: abstractDragDataNode,\n        dropNode: abstractDropDataNode,\n        dropPosition: 0\n      })) {\n        dropPosition = 0;\n      } else if (allowDrop({\n        dragNode: abstractDragDataNode,\n        dropNode: abstractDropDataNode,\n        dropPosition: 1\n      })) {\n        dropPosition = 1;\n      } else {\n        dropAllowed = false;\n      }\n    }\n  } else {\n    // | Node1 | <- abstractDropNode\n    //      |  Node2  |\n    // --^--|----=====| <- mousePosition\n    // 1. try insert after Node1\n    // 2. do not allow drop\n    if (allowDrop({\n      dragNode: abstractDragDataNode,\n      dropNode: abstractDropDataNode,\n      dropPosition: 1\n    })) {\n      dropPosition = 1;\n    } else {\n      dropAllowed = false;\n    }\n  }\n\n  return {\n    dropPosition: dropPosition,\n    dropLevelOffset: dropLevelOffset,\n    dropTargetKey: abstractDropNodeEntity.key,\n    dropTargetPos: abstractDropNodeEntity.pos,\n    dragOverNodeKey: dragOverNodeKey,\n    dropContainerKey: dropPosition === 0 ? null : ((_abstractDropNodeEnti = abstractDropNodeEntity.parent) === null || _abstractDropNodeEnti === void 0 ? void 0 : _abstractDropNodeEnti.key) || null,\n    dropAllowed: dropAllowed\n  };\n}\n/**\n * Return selectedKeys according with multiple prop\n * @param selectedKeys\n * @param props\n * @returns [string]\n */\n\nexport function calcSelectedKeys(selectedKeys, props) {\n  if (!selectedKeys) return undefined;\n  var multiple = props.multiple;\n\n  if (multiple) {\n    return selectedKeys.slice();\n  }\n\n  if (selectedKeys.length) {\n    return [selectedKeys[0]];\n  }\n\n  return selectedKeys;\n}\n\nvar internalProcessProps = function internalProcessProps(props) {\n  return props;\n};\n\nexport function convertDataToTree(treeData, processor) {\n  if (!treeData) return [];\n\n  var _ref2 = processor || {},\n      _ref2$processProps = _ref2.processProps,\n      processProps = _ref2$processProps === void 0 ? internalProcessProps : _ref2$processProps;\n\n  var list = Array.isArray(treeData) ? treeData : [treeData];\n  return list.map(function (_ref3) {\n    var children = _ref3.children,\n        props = _objectWithoutProperties(_ref3, _excluded);\n\n    var childrenNodes = convertDataToTree(children, processor);\n    return _createVNode(TreeNode, _objectSpread({\n      \"key\": props.key\n    }, processProps(props)), {\n      default: function _default() {\n        return [childrenNodes];\n      }\n    });\n  });\n}\n/**\n * Parse `checkedKeys` to { checkedKeys, halfCheckedKeys } style\n */\n\nexport function parseCheckedKeys(keys) {\n  if (!keys) {\n    return null;\n  } // Convert keys to object format\n\n\n  var keyProps;\n\n  if (Array.isArray(keys)) {\n    // [Legacy] Follow the api doc\n    keyProps = {\n      checkedKeys: keys,\n      halfCheckedKeys: undefined\n    };\n  } else if (_typeof(keys) === 'object') {\n    keyProps = {\n      checkedKeys: keys.checked || undefined,\n      halfCheckedKeys: keys.halfChecked || undefined\n    };\n  } else {\n    warning(false, '`checkedKeys` is not an array or an object');\n    return null;\n  }\n\n  return keyProps;\n}\n/**\n * If user use `autoExpandParent` we should get the list of parent node\n * @param keyList\n * @param keyEntities\n */\n\nexport function conductExpandParent(keyList, keyEntities) {\n  var expandedKeys = new Set();\n\n  function conductUp(key) {\n    if (expandedKeys.has(key)) return;\n    var entity = keyEntities[key];\n    if (!entity) return;\n    expandedKeys.add(key);\n    var parent = entity.parent,\n        node = entity.node;\n    if (node.disabled) return;\n\n    if (parent) {\n      conductUp(parent.key);\n    }\n  }\n\n  (keyList || []).forEach(function (key) {\n    conductUp(key);\n  });\n  return _toConsumableArray(expandedKeys);\n}","map":{"version":3,"names":["_toConsumableArray","_typeof","_objectSpread","_objectWithoutProperties","_excluded","createVNode","_createVNode","TreeNode","warning","arrDel","list","value","clone","slice","index","indexOf","splice","arrAdd","push","posToArr","pos","split","getPosition","level","concat","isTreeNode","node","type","getDragChildrenKeys","dragNodeKey","keyEntities","dragChildrenKeys","entity","dig","arguments","length","undefined","forEach","_ref","key","children","isLastChild","treeNodeEntity","parent","posArr","Number","isFirstChild","calcDropPosition","event","dragNode","targetNode","indent","startMousePosition","allowDrop","flattenedNodes","expandKeysSet","direction","_abstractDropNodeEnti","clientX","clientY","_event$target$getBoun","target","getBoundingClientRect","top","height","horizontalMouseOffset","x","rawDropLevelOffset","abstractDropNodeEntity","eventKey","nodeIndex","findIndex","flattenedNode","prevNodeIndex","prevNodeKey","initialAbstractDropNodeKey","abstractDragOverEntity","dragOverNodeKey","dropPosition","dropLevelOffset","has","i","abstractDragDataNode","eventData","abstractDropDataNode","dropAllowed","dropNode","dropTargetKey","dropTargetPos","dropContainerKey","calcSelectedKeys","selectedKeys","props","multiple","internalProcessProps","convertDataToTree","treeData","processor","_ref2","_ref2$processProps","processProps","Array","isArray","map","_ref3","childrenNodes","default","_default","parseCheckedKeys","keys","keyProps","checkedKeys","halfCheckedKeys","checked","halfChecked","conductExpandParent","keyList","expandedKeys","Set","conductUp","add","disabled"],"sources":["/Users/jasonti/Desktop/Tripper/vue/node_modules/ant-design-vue/es/vc-tree/util.js"],"sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"children\"];\nimport { createVNode as _createVNode } from \"vue\";\n/* eslint-disable no-lonely-if */\n/**\n * Legacy code. Should avoid to use if you are new to import these code.\n */\nimport TreeNode from './TreeNode';\nimport { warning } from '../vc-util/warning';\nexport function arrDel(list, value) {\n  if (!list) return [];\n  var clone = list.slice();\n  var index = clone.indexOf(value);\n  if (index >= 0) {\n    clone.splice(index, 1);\n  }\n  return clone;\n}\nexport function arrAdd(list, value) {\n  var clone = (list || []).slice();\n  if (clone.indexOf(value) === -1) {\n    clone.push(value);\n  }\n  return clone;\n}\nexport function posToArr(pos) {\n  return pos.split('-');\n}\nexport function getPosition(level, index) {\n  return \"\".concat(level, \"-\").concat(index);\n}\nexport function isTreeNode(node) {\n  return node && node.type && node.type.isTreeNode;\n}\nexport function getDragChildrenKeys(dragNodeKey, keyEntities) {\n  // not contains self\n  // self for left or right drag\n  var dragChildrenKeys = [];\n  var entity = keyEntities[dragNodeKey];\n  function dig() {\n    var list = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    list.forEach(function (_ref) {\n      var key = _ref.key,\n        children = _ref.children;\n      dragChildrenKeys.push(key);\n      dig(children);\n    });\n  }\n  dig(entity.children);\n  return dragChildrenKeys;\n}\nexport function isLastChild(treeNodeEntity) {\n  if (treeNodeEntity.parent) {\n    var posArr = posToArr(treeNodeEntity.pos);\n    return Number(posArr[posArr.length - 1]) === treeNodeEntity.parent.children.length - 1;\n  }\n  return false;\n}\nexport function isFirstChild(treeNodeEntity) {\n  var posArr = posToArr(treeNodeEntity.pos);\n  return Number(posArr[posArr.length - 1]) === 0;\n}\n// Only used when drag, not affect SSR.\nexport function calcDropPosition(event, dragNode, targetNode, indent, startMousePosition, allowDrop, flattenedNodes, keyEntities, expandKeysSet, direction) {\n  var _abstractDropNodeEnti;\n  var clientX = event.clientX,\n    clientY = event.clientY;\n  var _event$target$getBoun = event.target.getBoundingClientRect(),\n    top = _event$target$getBoun.top,\n    height = _event$target$getBoun.height;\n  // optional chain for testing\n  var horizontalMouseOffset = (direction === 'rtl' ? -1 : 1) * (((startMousePosition === null || startMousePosition === void 0 ? void 0 : startMousePosition.x) || 0) - clientX);\n  var rawDropLevelOffset = (horizontalMouseOffset - 12) / indent;\n  // find abstract drop node by horizontal offset\n  var abstractDropNodeEntity = keyEntities[targetNode.eventKey];\n  if (clientY < top + height / 2) {\n    // first half, set abstract drop node to previous node\n    var nodeIndex = flattenedNodes.findIndex(function (flattenedNode) {\n      return flattenedNode.key === abstractDropNodeEntity.key;\n    });\n    var prevNodeIndex = nodeIndex <= 0 ? 0 : nodeIndex - 1;\n    var prevNodeKey = flattenedNodes[prevNodeIndex].key;\n    abstractDropNodeEntity = keyEntities[prevNodeKey];\n  }\n  var initialAbstractDropNodeKey = abstractDropNodeEntity.key;\n  var abstractDragOverEntity = abstractDropNodeEntity;\n  var dragOverNodeKey = abstractDropNodeEntity.key;\n  var dropPosition = 0;\n  var dropLevelOffset = 0;\n  // Only allow cross level drop when dragging on a non-expanded node\n  if (!expandKeysSet.has(initialAbstractDropNodeKey)) {\n    for (var i = 0; i < rawDropLevelOffset; i += 1) {\n      if (isLastChild(abstractDropNodeEntity)) {\n        abstractDropNodeEntity = abstractDropNodeEntity.parent;\n        dropLevelOffset += 1;\n      } else {\n        break;\n      }\n    }\n  }\n  var abstractDragDataNode = dragNode.eventData;\n  var abstractDropDataNode = abstractDropNodeEntity.node;\n  var dropAllowed = true;\n  if (isFirstChild(abstractDropNodeEntity) && abstractDropNodeEntity.level === 0 && clientY < top + height / 2 && allowDrop({\n    dragNode: abstractDragDataNode,\n    dropNode: abstractDropDataNode,\n    dropPosition: -1\n  }) && abstractDropNodeEntity.key === targetNode.eventKey) {\n    // first half of first node in first level\n    dropPosition = -1;\n  } else if ((abstractDragOverEntity.children || []).length && expandKeysSet.has(dragOverNodeKey)) {\n    // drop on expanded node\n    // only allow drop inside\n    if (allowDrop({\n      dragNode: abstractDragDataNode,\n      dropNode: abstractDropDataNode,\n      dropPosition: 0\n    })) {\n      dropPosition = 0;\n    } else {\n      dropAllowed = false;\n    }\n  } else if (dropLevelOffset === 0) {\n    if (rawDropLevelOffset > -1.5) {\n      // | Node     | <- abstractDropNode\n      // | -^-===== | <- mousePosition\n      // 1. try drop after\n      // 2. do not allow drop\n      if (allowDrop({\n        dragNode: abstractDragDataNode,\n        dropNode: abstractDropDataNode,\n        dropPosition: 1\n      })) {\n        dropPosition = 1;\n      } else {\n        dropAllowed = false;\n      }\n    } else {\n      // | Node     | <- abstractDropNode\n      // | ---==^== | <- mousePosition\n      // whether it has children or doesn't has children\n      // always\n      // 1. try drop inside\n      // 2. try drop after\n      // 3. do not allow drop\n      if (allowDrop({\n        dragNode: abstractDragDataNode,\n        dropNode: abstractDropDataNode,\n        dropPosition: 0\n      })) {\n        dropPosition = 0;\n      } else if (allowDrop({\n        dragNode: abstractDragDataNode,\n        dropNode: abstractDropDataNode,\n        dropPosition: 1\n      })) {\n        dropPosition = 1;\n      } else {\n        dropAllowed = false;\n      }\n    }\n  } else {\n    // | Node1 | <- abstractDropNode\n    //      |  Node2  |\n    // --^--|----=====| <- mousePosition\n    // 1. try insert after Node1\n    // 2. do not allow drop\n    if (allowDrop({\n      dragNode: abstractDragDataNode,\n      dropNode: abstractDropDataNode,\n      dropPosition: 1\n    })) {\n      dropPosition = 1;\n    } else {\n      dropAllowed = false;\n    }\n  }\n  return {\n    dropPosition: dropPosition,\n    dropLevelOffset: dropLevelOffset,\n    dropTargetKey: abstractDropNodeEntity.key,\n    dropTargetPos: abstractDropNodeEntity.pos,\n    dragOverNodeKey: dragOverNodeKey,\n    dropContainerKey: dropPosition === 0 ? null : ((_abstractDropNodeEnti = abstractDropNodeEntity.parent) === null || _abstractDropNodeEnti === void 0 ? void 0 : _abstractDropNodeEnti.key) || null,\n    dropAllowed: dropAllowed\n  };\n}\n/**\n * Return selectedKeys according with multiple prop\n * @param selectedKeys\n * @param props\n * @returns [string]\n */\nexport function calcSelectedKeys(selectedKeys, props) {\n  if (!selectedKeys) return undefined;\n  var multiple = props.multiple;\n  if (multiple) {\n    return selectedKeys.slice();\n  }\n  if (selectedKeys.length) {\n    return [selectedKeys[0]];\n  }\n  return selectedKeys;\n}\nvar internalProcessProps = function internalProcessProps(props) {\n  return props;\n};\nexport function convertDataToTree(treeData, processor) {\n  if (!treeData) return [];\n  var _ref2 = processor || {},\n    _ref2$processProps = _ref2.processProps,\n    processProps = _ref2$processProps === void 0 ? internalProcessProps : _ref2$processProps;\n  var list = Array.isArray(treeData) ? treeData : [treeData];\n  return list.map(function (_ref3) {\n    var children = _ref3.children,\n      props = _objectWithoutProperties(_ref3, _excluded);\n    var childrenNodes = convertDataToTree(children, processor);\n    return _createVNode(TreeNode, _objectSpread({\n      \"key\": props.key\n    }, processProps(props)), {\n      default: function _default() {\n        return [childrenNodes];\n      }\n    });\n  });\n}\n/**\n * Parse `checkedKeys` to { checkedKeys, halfCheckedKeys } style\n */\nexport function parseCheckedKeys(keys) {\n  if (!keys) {\n    return null;\n  }\n  // Convert keys to object format\n  var keyProps;\n  if (Array.isArray(keys)) {\n    // [Legacy] Follow the api doc\n    keyProps = {\n      checkedKeys: keys,\n      halfCheckedKeys: undefined\n    };\n  } else if (_typeof(keys) === 'object') {\n    keyProps = {\n      checkedKeys: keys.checked || undefined,\n      halfCheckedKeys: keys.halfChecked || undefined\n    };\n  } else {\n    warning(false, '`checkedKeys` is not an array or an object');\n    return null;\n  }\n  return keyProps;\n}\n/**\n * If user use `autoExpandParent` we should get the list of parent node\n * @param keyList\n * @param keyEntities\n */\nexport function conductExpandParent(keyList, keyEntities) {\n  var expandedKeys = new Set();\n  function conductUp(key) {\n    if (expandedKeys.has(key)) return;\n    var entity = keyEntities[key];\n    if (!entity) return;\n    expandedKeys.add(key);\n    var parent = entity.parent,\n      node = entity.node;\n    if (node.disabled) return;\n    if (parent) {\n      conductUp(parent.key);\n    }\n  }\n  (keyList || []).forEach(function (key) {\n    conductUp(key);\n  });\n  return _toConsumableArray(expandedKeys);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}